// Importing necessary modules
import { Component } from '@angular/core';
import { Injectable } from '@angular/core';



// Function Declaration
function greet(name: string) {
    return `Hello, ${name}!`;
}

// Class Declaration
class User {
    public id: number;
    private name: string;
    protected email: string;

    constructor(id: number) {
        this.id = id;}
    }

    function getName ()  {
        return this.name;
    }
}

// Enum Declaration
enum UserRole {
    ADMIN = "admin",
    USER = "user",
    GUEST = "guest"
}

// Component Declaration
@Component({
    selector: 'app-root',
    template: `<h1>{{ title }}</h1>`,
})
class AppComponent {
    title: string ;

    constructor() {
         this.title = " "
        console.log(greet("World"));
    }
}

// Service Declaration
@Injectable({
    providedIn: 'root',
})
class UserService {
    getUser (id: number) {
        return new User(id, "John Doe");
    }
}

// Import Statement
import { NgModule } from '@angular/core';

// Export Statement
export   User ;

// Main Application Module
@NgModule({
    declarations: [AppComponent],
    imports: [],
    providers: [UserService],
    bootstrap: [AppComponent]
})
class AppModule {}

// Expression Statement
count = 10;

// If Statement
if (count > 0) {
    console.log("Count is positive");
} else {
    console.log("Count is zero or negative");
}

// For Statement
for (let i = 0; i < count; i++) {
    console.log(`Count is: ${i}`);
}

// While Statement
while (count > 0) {
    console.log(`Counting down: ${count}`);
    count--;
}

// Try-Catch Statement
try {
    throw new Error("An error occurred");
} catch (error) {
    console.error(error);
} finally {
    console.log("Finally block executed");
}

// Return Statement
function add(a: number, b: number): number {
    return a + b;
}

// Break Statement
for (let i = 0; i < 10; i++) {
    if (i === 5) {
        break; // Exit the loop when i is 5
    }
    console.log(i);
}

// Continue Statement
for (let i = 0; i < 10; i++) {
    if (i % 2 === 0) {
        continue; // Skip even numbers
    }
    console.log(i);
}

// Throw Statement
function throwError() {
    throw new Error("This is a thrown error");
}

// Decorator Application
function Log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;
    descriptor.value = function (...args: any[]) {
        console.log(`Calling ${propertyKey} with`, args);
        return originalMethod.apply(this, args);
    };
}

class Example {
    @Log
    method(param: string) {
        console.log(`Method executed with param: ${param}`);
    }
}

// Usage of the Example class
const example = new Example();
example.method("Test");
// Variable Declarations
const appName = "My Angular App";
let count = number;